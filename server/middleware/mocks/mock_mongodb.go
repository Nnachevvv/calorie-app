// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nnachevv/calorieapp/server/middleware (interfaces: MongoDatabase)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/Nnachevv/calorieapp/models"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockMongoDatabase is a mock of MongoDatabase interface
type MockMongoDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDatabaseMockRecorder
}

// MockMongoDatabaseMockRecorder is the mock recorder for MockMongoDatabase
type MockMongoDatabaseMockRecorder struct {
	mock *MockMongoDatabase
}

// NewMockMongoDatabase creates a new mock instance
func NewMockMongoDatabase(ctrl *gomock.Controller) *MockMongoDatabase {
	mock := &MockMongoDatabase{ctrl: ctrl}
	mock.recorder = &MockMongoDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMongoDatabase) EXPECT() *MockMongoDatabaseMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockMongoDatabase) Add(arg0 models.RegisterUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockMongoDatabaseMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMongoDatabase)(nil).Add), arg0)
}

// Find mocks base method
func (m *MockMongoDatabase) Find(arg0 string) (primitive.M, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(primitive.M)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockMongoDatabaseMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMongoDatabase)(nil).Find), arg0)
}
